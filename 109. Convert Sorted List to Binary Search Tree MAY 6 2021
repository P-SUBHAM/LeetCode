/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* help(vector<int> &v, int l, int r) {
        if(r < l) {
            return NULL;
        }
        int mid = (l+r)/2;
        TreeNode* root = new TreeNode;
        root->val = v[mid];
        root->left = help(v, l, mid-1);
        root->right = help(v, mid+1, r);
        return root;
    }
    TreeNode* sortedListToBST(ListNode* head) {
        vector<int> v;
        ListNode* temp = head;
        while(temp!=NULL) {
            v.push_back(temp->val);
            temp =temp->next;
        }
        int n = v.size();
        TreeNode* ans;
        ans = help(v,0,n-1);
        return ans;
    }
};
