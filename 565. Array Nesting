class Solution {
public:
    map<int,int> leader;
    map<int,int> size;
    void makel(int x) {
        size[x]++;
        leader[x] = x;
    }
    int findl(int x) {
        if(leader[x] == x) {
            return x;
        }
        return leader[x] = findl(leader[x]);
    }
    void unions(int a, int b) {
        a = findl(a);
        b = findl(b);
        if(a!=b) {
            if(size[a] < size[b]) {
                leader[a] = b;
                size[b] += size[a];
            }
            else {
                leader[b] = a;
                size[a] += size[b];
            }
        }
    }
    int arrayNesting(vector<int>& nums) {
        leader.clear();
        size.clear();
        int n = nums.size();
        for(int i = 0; i < n; i++) {
            makel(nums[i]);
        }
        for(int i = 0; i < n; i++) {
            unions(i,nums[i]);
        }
        map<int,int> mp;
        for(int i = 0; i < n; i++) {
            mp[findl(i)]++;
        }
        int ans = 0;
        for(auto it: mp) {
            ans = max(ans,it.second);
        }
        return ans;
    }
};
